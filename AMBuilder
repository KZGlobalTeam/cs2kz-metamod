import os

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)

for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  CXXINCLUDES = [
      os.path.join(builder.sourcePath, 'src'),
      os.path.join(builder.sourcePath, 'hl2sdk-cs2'),
      os.path.join(builder.sourcePath, 'hl2sdk-cs2', 'public', 'entity2'),
      os.path.join(builder.sourcePath, 'hl2sdk-cs2', 'game', 'server'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
  ]

  PROTOS = [
    os.path.join(sdk['path'], 'game', 'shared', 'usermessages.proto'),
    os.path.join(sdk['path'], 'common', 'network_connection.proto'),
    os.path.join(sdk['path'], 'common', 'networkbasetypes.proto'),
    os.path.join(sdk['path'], 'common', 'engine_gcmessages.proto'),
    os.path.join(sdk['path'], 'gcsdk', 'steammessages.proto'),
    os.path.join(sdk['path'], 'gcsdk', 'gcsdk_gcmessages.proto'),
    os.path.join(builder.sourcePath, 'protobuf', 'cstrike15_gcmessages.proto'),
    os.path.join(builder.sourcePath, 'protobuf', 'cstrike15_usermessages.proto'),
    os.path.join(sdk['path'], 'game', 'shared', 'usercmd.proto'),
    os.path.join(sdk['path'], 'game', 'shared', 'gameevents.proto'),
    os.path.join(builder.sourcePath, 'protobuf', 'cs_gameevents.proto'),
    os.path.join(builder.sourcePath, 'protobuf', 'cs_usercmd.proto'),
  ]

  # Main binary
  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  if binary.compiler.family == 'gcc' or binary.compiler.family == 'clang':
    binary.compiler.linkflags += ['-lstdc++']
    binary.compiler.defines += ['_GLIBCXX_USE_CXX11_ABI=0']

  if binary.compiler.family == 'clang':
    binary.compiler.cxxflags += ['-Wno-register', '-frtti', '-Wno-invalid-offsetof', '-Wno-parentheses']

  binary.compiler.cxxincludes += CXXINCLUDES

  if binary.compiler.target.platform == 'linux':
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libfunchook.a'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libdistorm.a'),
      os.path.join(sdk['path'], 'lib', 'linux64', 'mathlib.a'),
    ] 
    binary.sources += [
      'src/utils/plat_linux.cpp',
      os.path.join(sdk['path'], 'public', 'tier0', 'memoverride.cpp')
      ]
  elif binary.compiler.target.platform == 'windows':
    binary.compiler.postlink += [
      os.path.join('psapi.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'funchook.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'distorm.lib'),
      os.path.join(sdk['path'], 'lib', 'public', 'win64', 'mathlib.lib'),
    ]
    binary.sources += [
      'src/utils/plat_win.cpp'
      ]

  binary.sources += [
    os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'),
    os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'),
    os.path.join(sdk['path'], 'tier1', 'generichash.cpp'),
    
    os.path.join(builder.sourcePath, 'src', 'cs2kz.cpp'),
    
    os.path.join(builder.sourcePath, 'src', 'utils', 'utils.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'utils_interface.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'utils_print.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'gameconfig.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'hooks.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'detours.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'schema.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'simplecmds.cpp'),

    os.path.join(builder.sourcePath, 'src', 'movement', 'mv_hooks.cpp'),
    os.path.join(builder.sourcePath, 'src', 'movement', 'mv_manager.cpp'),
    os.path.join(builder.sourcePath, 'src', 'movement', 'mv_player.cpp'),

    os.path.join(builder.sourcePath, 'src', 'kz', 'kz_misc.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'kz_manager.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'kz_player.cpp'),

    os.path.join(builder.sourcePath, 'src', 'kz', 'anticheat', 'kz_anticheat.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'checkpoint', 'kz_checkpoint.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'checkpoint', 'commands.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'global', 'kz_global.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'hud', 'kz_hud.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'jumpstats', 'kz_jumpstats.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'measure', 'kz_measure.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'mode', 'kz_mode_manager.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'mode', 'kz_mode_vnl.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'noclip', 'kz_noclip.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'option', 'kz_option.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'quiet', 'kz_quiet.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'racing', 'kz_racing.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'replays', 'kz_replays.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'saveloc', 'kz_saveloc.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'spec', 'kz_spec.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'style', 'kz_style_manager.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'style', 'kz_style_normal.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'timer', 'kz_timer.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'tip', 'kz_tip.cpp'),
  ]

  binary.custom = [builder.tools.Protoc(protoc = sdk_target.protoc, sources = PROTOS)]

  # Mode binaries
  mode_binary = MMSPlugin.HL2Library(builder, cxx, f"{MMSPlugin.plugin_name}-mode-ckz", sdk)

  if mode_binary.compiler.family == 'gcc' or mode_binary.compiler.family == 'clang':
    mode_binary.compiler.linkflags += ['-lstdc++']
    mode_binary.compiler.defines += ['_GLIBCXX_USE_CXX11_ABI=0']

  if mode_binary.compiler.family == 'clang':
    mode_binary.compiler.cxxflags += ['-Wno-register', '-frtti', '-Wno-invalid-offsetof', '-Wno-parentheses']

  mode_binary.compiler.cxxincludes += CXXINCLUDES

  if mode_binary.compiler.target.platform == 'linux':
    mode_binary.compiler.postlink += [
      os.path.join(sdk['path'], 'lib', 'linux64', 'mathlib.a'),
    ] 
    mode_binary.sources += [
      'src/utils/plat_linux.cpp',
      os.path.join(sdk['path'], 'public', 'tier0', 'memoverride.cpp')
      ]
  elif mode_binary.compiler.target.platform == 'windows':
    mode_binary.compiler.postlink += [
      os.path.join(sdk['path'], 'lib', 'public', 'win64', 'mathlib.lib'),
    ]

  mode_binary.sources += [
    os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'),
    os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'schema.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'gameconfig.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'mode', 'kz_mode_ckz.cpp'),
  ]
  
  # Style binaries
  style_binary = MMSPlugin.HL2Library(builder, cxx, f"{MMSPlugin.plugin_name}-style-autobhop", sdk)

  if style_binary.compiler.family == 'gcc' or style_binary.compiler.family == 'clang':
    style_binary.compiler.linkflags += ['-lstdc++']
    style_binary.compiler.defines += ['_GLIBCXX_USE_CXX11_ABI=0']

  if style_binary.compiler.family == 'clang':
    style_binary.compiler.cxxflags += ['-Wno-register', '-frtti', '-Wno-invalid-offsetof', '-Wno-parentheses']

  style_binary.compiler.cxxincludes += CXXINCLUDES

  if style_binary.compiler.target.platform == 'linux':
    style_binary.compiler.postlink += [
      os.path.join(sdk['path'], 'lib', 'linux64', 'mathlib.a'),
    ] 
    style_binary.sources += [
      'src/utils/plat_linux.cpp',
      os.path.join(sdk['path'], 'public', 'tier0', 'memoverride.cpp')
      ]
  elif style_binary.compiler.target.platform == 'windows':
    style_binary.compiler.postlink += [
      os.path.join(sdk['path'], 'lib', 'public', 'win64', 'mathlib.lib'),
    ]

  style_binary.sources += [
    os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'),
    os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'schema.cpp'),
    os.path.join(builder.sourcePath, 'src', 'utils', 'gameconfig.cpp'),
    os.path.join(builder.sourcePath, 'src', 'kz', 'style', 'kz_style_autobhop.cpp'),
  ]
  
  protoc_builder = builder.tools.Protoc(protoc = sdk_target.protoc, sources = PROTOS)
  protoc_builder.protoc.includes += [
    os.path.join(sdk['path'], 'gcsdk'),
    os.path.join(builder.sourcePath, 'protobuf')
  ]

  binary.custom = [protoc_builder]
  mode_binary.custom = [protoc_builder]
  style_binary.custom = [protoc_builder]

  nodes = builder.Add(binary)
  mode_nodes = builder.Add(mode_binary)
  style_nodes = builder.Add(style_binary)

  # If we are generating a VS project, make sure to add the modes in, and the build folder for linter.
  if builder.options.generator == 'vs':
    binary.sources += mode_binary.sources
    binary.sources += style_binary.sources
    binary.compiler.cxxincludes += [os.path.join(builder.buildPath, MMSPlugin.plugin_name, f'{binary.compiler.target.platform}-{cxx.target.arch}')]


  MMSPlugin.binaries += [nodes]
  MMSPlugin.mode_binaries += [mode_nodes]
  MMSPlugin.style_binaries += [style_nodes]

# vim: filetype=python expandtab shiftwidth=2 tabstop=8 textwidth=99
